version: '3'
services:
  # FRONTEND
  front:
   build:
     context: ./frontend
   image: node:lts-alpine
   container_name: frontend
   working_dir: /app
   volumes:
     - ./frontend:/app
   ports:
     - "3000:3000"
   restart: unless-stopped
   command: sh -c "yarn install && yarn start"
   networks:
     - transcendence
   depends_on:
     - backend

#BACKEND
  backend:
   build:
     context: ./backend
   image: python:3.8-alpine
   container_name: back
   working_dir: /app
   ports:
     - "8080:8080"
   volumes:
     - ./backend:/app
     - ./nginx/nginx.crt:/app/nginx.crt
     - ./nginx/nginx.key:/app/nginx.key
   networks:
     - transcendence
   restart: unless-stopped
     #command: sh -c "pip install -r requirements.txt && python3 manage.py runsslserver 0.0.0.0:8080 --cert /app/nginx.crt --key /app/nginx.key --noreload"
   command: sh -c "pip install -r requirements.txt && python3 manage.py makemigrations && python3 manage.py migrate && python3 manage.py runsslserver 0.0.0.0:8080 --cert /app/nginx.crt --key /app/nginx.key --noreload"

# NGINX
  nginx:
    image: nginx:latest
    container_name: nginx
    ports:
      - "1024:1024"
      - "8082:8082"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/nginx.crt:/etc/nginx/nginx.crt
      - ./nginx/nginx.key:/etc/nginx/nginx.key
    depends_on:
      - front
    networks:
      - transcendence
#POSTGRESQL
  database:
    container_name: postgres
    image: postgres
    ports:
      - 5432:5432
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    env_file:
      - ./backend/.env
    networks:
      - transcendence
    restart: unless-stopped

networks:
  transcendence:
    name: transcendence

